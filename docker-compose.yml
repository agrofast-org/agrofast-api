services:
    agrofast-nginx:
        container_name: agrofast-nginx
        image: nginx:alpine
        restart: always
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ../docker/config/nginx/conf.d/api.conf:/etc/nginx/conf.d/api.conf
            - ../docker/config/nginx/conf.d/console.conf:/etc/nginx/conf.d/console.conf
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - agrofast-network

    agrofast-php-fpm:
        container_name: agrofast-php-fpm
        build:
            context: .
            dockerfile: Dockerfile.dev
        restart: always
        working_dir: /var/www
        ports:
            - "9000:9000"
        volumes:
            - ./:/var/www
            - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
        depends_on:
            - agrofast-postgres
            - agrofast-nginx
            - agrofast-minio
        networks:
            - agrofast-network
            - mapdata-network

    agrofast-postgres: # Only used for creating the application database
        container_name: agrofast-postgres
        image: postgres:15
        restart: on-failure
        environment:
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_DATABASE}
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_SCHEMA=${DB_SCHEMA}
        networks:
            - agrofast-network
            - mapdata-network
        volumes:
            - ./docker/database/init-db.sh:/usr/local/bin/init-db.sh
        entrypoint: >
            sh -c "
            /usr/local/bin/init-db.sh
            "

    agrofast-minio: # Only used for creating the application bucket
        container_name: agrofast-minio
        image: minio/mc:latest
        restart: "no"
        environment:
            - APP_NAME=${APP_NAME}
        entrypoint: ["/bin/sh", "-c"]
        command: >
            "
            mc config host add minio http://minio:9100 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
            mc mb -p minio/${AWS_BUCKET};
            echo 'Minio is ready!';
            exit 0;
            "
        networks:
            - agrofast-network
            - mapdata-network

    agrofast-redis:
        container_name: agrofast-redis
        image: redis:alpine
        restart: always
        ports:
            - "6379:6379"
        networks:
            - agrofast-network

volumes:
    postgres_data:
    minio_data:
    cache:
        driver: local

networks:
    agrofast-network:
        driver: bridge
